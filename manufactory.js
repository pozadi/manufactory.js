// Generated by CoffeeScript 1.4.0
(function() {
  var GLOBAL, notOption, splitToLines, whitespace,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.manufactory = {
    _modules: {},
    _instances: {},
    find: function(moduleName) {
      return this._instances[moduleName] || [];
    },
    on: function(eventName, moduleName, callback) {
      this.callbacks.globalCallbacks(moduleName, eventName).add(callback);
      return this;
    },
    off: function(eventName, moduleName, callback) {
      this.callbacks.globalCallbacks(moduleName, eventName).remove(callback);
      return this;
    },
    init: function(moduleName, context) {
      var el, selector, _i, _len, _ref, _results;
      if (context == null) {
        context = document;
      }
      selector = this._modules[moduleName].ROOT_SELECTOR;
      if (selector) {
        _ref = $(selector, context).add($(context).filter(selector));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(new this._modules[moduleName]($(el)));
        }
        return _results;
      } else {
        return [];
      }
    },
    initAll: function(context) {
      var Module, moduleName, _ref, _results;
      if (context == null) {
        context = document;
      }
      _ref = this._modules;
      _results = [];
      for (moduleName in _ref) {
        Module = _ref[moduleName];
        if (Module.AUTO_INIT) {
          _results.push(this.init(moduleName, context));
        }
      }
      return _results;
    },
    callbacks: {
      _global: {},
      _trigger: function(moduleInstance, eventName, data) {
        var callbacks, _i, _len, _ref;
        _ref = [this.localCallbacks(moduleInstance, eventName), this.globalCallbacks(moduleInstance.constructor.NAME, eventName)];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callbacks = _ref[_i];
          callbacks.fireWith(moduleInstance, [data, eventName]);
        }
        return this;
      },
      localCallbacks: function(moduleInstance, eventName) {
        var _base;
        return (_base = (moduleInstance.__eventHandlers || (moduleInstance.__eventHandlers = {})))[eventName] || (_base[eventName] = $.Callbacks());
      },
      globalCallbacks: function(moduleName, eventName) {
        var _base, _base1;
        return (_base = ((_base1 = this._global)[moduleName] || (_base1[moduleName] = {})))[eventName] || (_base[eventName] = $.Callbacks());
      }
    }
  };

  manufactory.module = function(moduleName, builder) {
    var currentScope, lambdaModule, newModule, part, parts, theName, _i, _len;
    if (!builder) {
      builder = moduleName;
      moduleName = _.uniqueId('LambdaModule');
      lambdaModule = true;
    }
    newModule = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      return _Class;

    })(manufactory.BaseModule);
    newModule.NAME = moduleName;
    newModule.LAMBDA = !!lambdaModule;
    builder(new manufactory.ModuleInfo(newModule));
    manufactory._modules[moduleName] = newModule;
    if (newModule.AUTO_INIT) {
      $(function() {
        return manufactory.init(newModule.NAME);
      });
    }
    if (!lambdaModule) {
      parts = moduleName.split('.');
      theName = parts.pop();
      currentScope = window;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        currentScope = (currentScope[part] || (currentScope[part] = {}));
      }
      currentScope[theName] = newModule;
    }
    return newModule;
  };

  manufactory.BaseModule = (function() {

    function BaseModule(root, settings) {
      var DEFAULT_SETTINGS, EXPECTED_SETTINGS, NAME, dataSettings, existing, _base, _ref;
      _ref = this.constructor, EXPECTED_SETTINGS = _ref.EXPECTED_SETTINGS, DEFAULT_SETTINGS = _ref.DEFAULT_SETTINGS, NAME = _ref.NAME;
      if (existing = root.data(NAME)) {
        return existing;
      }
      ((_base = manufactory._instances)[NAME] || (_base[NAME] = [])).push(this);
      this.root = root;
      this.root.data(NAME, this);
      dataSettings = _.pick(this.root.data() || {}, EXPECTED_SETTINGS);
      this.settings = _.extend({}, DEFAULT_SETTINGS, dataSettings, settings);
      this.__createElements();
      this["__bind"]();
      if (typeof this.initializer === "function") {
        this.initializer();
      }
    }

    BaseModule.prototype.updateElements = function() {
      var element, name, _ref, _results;
      _ref = this.constructor.ELEMENTS;
      _results = [];
      for (name in _ref) {
        element = _ref[name];
        _results.push(this["$" + name].update());
      }
      return _results;
    };

    BaseModule.prototype.find = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.root).find.apply(_ref, args);
    };

    BaseModule.prototype.on = function(eventName, handler) {
      manufactory.callbacks.localCallbacks(this, eventName).add(handler);
      return this;
    };

    BaseModule.prototype.off = function(eventName, handler) {
      manufactory.callbacks.localCallbacks(this, eventName).remove(handler);
      return this;
    };

    BaseModule.prototype.fire = function(eventName, data) {
      manufactory.callbacks._trigger(this, eventName, data);
      return this;
    };

    BaseModule.prototype.setOption = function(name, value) {
      this.settings[name] = value;
      return this;
    };

    BaseModule.prototype.__createElements = function() {
      var element, name, _ref, _results;
      this.$root = this.root;
      _ref = this.constructor.ELEMENTS;
      _results = [];
      for (name in _ref) {
        element = _ref[name];
        this["$" + name] = this.__findElement(element);
        _results.push(this["$$" + name] = this.__buildDynamicElement(element));
      }
      return _results;
    };

    BaseModule.prototype.__findElement = function(element) {
      var context, result;
      context = element.global ? document : this.root;
      result = $(element.selector, context);
      result.update = function() {
        var el, _i, _len, _ref;
        this.splice(0, this.length);
        _ref = $(element.selector, context);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          this.push(el);
        }
        return this;
      };
      return result;
    };

    BaseModule.prototype.__fixHandler = function(handler) {
      if (typeof handler === 'string') {
        handler = this[handler];
      }
      handler = _.bind(handler, this);
      return function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        args.unshift(this);
        return handler.apply(null, args);
      };
    };

    BaseModule.prototype["__bind"] = function() {
      var ELEMENTS, EVENTS, MODULE_EVENTS, elementName, eventMeta, eventName, handler, moduleName, _i, _j, _len, _len1, _ref;
      _ref = this.constructor, ELEMENTS = _ref.ELEMENTS, EVENTS = _ref.EVENTS, MODULE_EVENTS = _ref.MODULE_EVENTS;
      for (_i = 0, _len = EVENTS.length; _i < _len; _i++) {
        eventMeta = EVENTS[_i];
        handler = eventMeta.handler, eventName = eventMeta.eventName, elementName = eventMeta.elementName;
        (!elementName || elementName === 'root' ? this.root : this["$$" + elementName]).on(eventName, this.__fixHandler(handler));
      }
      for (_j = 0, _len1 = MODULE_EVENTS.length; _j < _len1; _j++) {
        eventMeta = MODULE_EVENTS[_j];
        eventName = eventMeta.eventName, moduleName = eventMeta.moduleName, handler = eventMeta.handler;
        manufactory.callbacks.globalCallbacks(moduleName, eventName).add(this.__fixHandler(handler));
      }
      return this;
    };

    BaseModule.__dynamicElementMixin = {
      byChild: function(child) {
        return $(child).parents(this.selector);
      },
      byParent: function(parent) {
        return $(parent).find(this.selector);
      },
      on: function(eventName, handler) {
        return (this.global ? $(document) : this.module.root).on(eventName, this.selector, handler);
      }
    };

    BaseModule.prototype.__buildDynamicElement = function(element) {
      var fn;
      fn = function(filter) {
        if (filter) {
          return this.__findElement(element).filter(filter);
        } else {
          return this.__findElement(element);
        }
      };
      return _.extend(fn, {
        module: this
      }, element, this.constructor.__dynamicElementMixin);
    };

    return BaseModule;

  })();

  GLOBAL = 'global';

  whitespace = /\s+/;

  splitToLines = function(str) {
    return _(str.split('\n')).filter(function(i) {
      return i !== '';
    });
  };

  notOption = function(i) {
    return i !== GLOBAL;
  };

  manufactory.ModuleInfo = (function() {
    var selectorToName;

    selectorToName = function(selector) {
      return $.camelCase(selector.replace(/[^a-z0-9]+/ig, '-').replace(/^-/, '').replace(/-$/, '').replace(/^js-/, ''));
    };

    function ModuleInfo(Module) {
      this.Module = Module;
      this.Module.ELEMENTS = {};
      this.Module.EVENTS = [];
      this.Module.MODULE_EVENTS = [];
      this.Module.DEFAULT_SETTINGS = {};
      this.Module.EXPECTED_SETTINGS = [];
      this.Module.AUTO_INIT = true;
    }

    ModuleInfo.prototype.methods = function(newMethods) {
      _.extend(this.Module.prototype, newMethods);
      return this;
    };

    ModuleInfo.prototype.autoInit = function(value) {
      this.Module.AUTO_INIT = value;
      return this;
    };

    ModuleInfo.prototype.root = function(rootSelector) {
      this.Module.ROOT_SELECTOR = $.trim(rootSelector);
      return this;
    };

    ModuleInfo.prototype.element = function(selector, name, global) {
      if (name == null) {
        name = null;
      }
      if (global == null) {
        global = false;
      }
      if (name === null) {
        name = selectorToName(selector);
      }
      this.Module.ELEMENTS[name] = {
        selector: selector,
        global: global
      };
      return this;
    };

    ModuleInfo.prototype.tree = function(treeString) {
      var line, lines, name, options, selector, _i, _len, _ref, _ref1;
      lines = splitToLines(treeString);
      this.root((_ref = lines.shift()) != null ? _ref.split('/')[0] : void 0);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _ref1 = _.map(line.split('/'), $.trim), selector = _ref1[0], options = _ref1[1];
        options = (options || '').split(whitespace);
        name = _.filter(options, notOption)[0] || null;
        if (selector) {
          this.element(selector, name, __indexOf.call(options, GLOBAL) >= 0);
        }
      }
      return this;
    };

    ModuleInfo.prototype.event = function(eventName, elementName, handler) {
      this.Module.EVENTS.push({
        elementName: elementName,
        eventName: eventName,
        handler: handler
      });
      return this;
    };

    ModuleInfo.prototype.events = function(eventsString) {
      var elementName, eventName, handlerName, line, lines, _i, _len, _ref;
      lines = splitToLines(eventsString);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _ref = line.split(whitespace), eventName = _ref[0], elementName = _ref[1], handlerName = _ref[2];
        if (!(handlerName != null)) {
          handlerName = elementName;
          elementName = 'root';
        }
        this.event(eventName, elementName, handlerName);
      }
      return this;
    };

    ModuleInfo.prototype.moduleEvent = function(eventName, moduleName, handler) {
      this.Module.MODULE_EVENTS.push({
        eventName: eventName,
        moduleName: moduleName,
        handler: handler
      });
      return this;
    };

    ModuleInfo.prototype.moduleEvents = function(moduleEventsString) {
      var eventName, handlerName, line, lines, moduleName, _i, _len, _ref;
      lines = splitToLines(moduleEventsString);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        _ref = line.split(whitespace), eventName = _ref[0], moduleName = _ref[1], handlerName = _ref[2];
        this.moduleEvent(eventName, moduleName, handlerName);
      }
      return this;
    };

    ModuleInfo.prototype.defaultSettings = function(newDefaultSettings) {
      _.extend(this.Module.DEFAULT_SETTINGS, newDefaultSettings);
      return this;
    };

    ModuleInfo.prototype.expectSettings = function(expectedSettings) {
      this.Module.EXPECTED_SETTINGS = _.union(this.Module.EXPECTED_SETTINGS, expectedSettings.split(whitespace));
      return this;
    };

    return ModuleInfo;

  })();

  _.extend($.fn, {
    module: function(moduleName) {
      if (this.length) {
        return new manufactory._modules[moduleName](this.first());
      }
    }
  });

}).call(this);
