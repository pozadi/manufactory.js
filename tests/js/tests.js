// Generated by CoffeeScript 1.4.0
(function() {

  $(function() {
    var hiddenDom, moduleAHtmlAll, moduleAHtmlOne;
    moduleAHtmlOne = "<div class=\"js-module\">\n  <button>hello</button>\n  <input type=\"button\" value=\"hello\">\n  <input type=\"text\" name=\"a\">\n  <input type=\"text\" name=\"b\">\n  <div class=\"js-some-div-\">\n    <div class=\"child\">abc</div>\n  </div>\n</div>";
    moduleAHtmlAll = "" + moduleAHtmlOne + "\n" + moduleAHtmlOne + "\n<div class=\"-global-div\">";
    hiddenDom = $('<div>').hide().appendTo('body');
    QUnit.testStart(function(details) {
      $('<div>').html(moduleAHtmlAll).appendTo(hiddenDom);
      window.TestModuleA = manufactory.module('test.modules.A', function(M) {
        M.tree("    .js-module    / foo bar static    dynamic  global /\n\n      button, [type=button]/ allButtons !@#$%^&*()\_+±   \n      input[type=text] \n\n      / withEmptySelector\n\n      // comment\n      .js-some-div-  \n      .js-some-div- .child    // comment\n\n      .-global-div /global / Приве†\n* / all");
        M.expectSettings('foo bar');
        M.defaultSettings({
          foo: 'default foo',
          bar: 'default bar'
        });
        return M.methods({
          initializer: function() {
            return this.message = 'hello';
          },
          getMessage: function() {
            return this.message;
          }
        });
      });
      window.TestModuleB = manufactory.module(function(Module) {
        Module.root('.js-module').element('button, [type=button]', 'allButtons').element('input[type=text]').element('.js-some-div-').element('.js-some-div- .child').element('.-global-div', null, true).element('*', 'all');
        return Module.autoInit(false);
      });
      return window.TestModuleEmpty = manufactory.module(function(M) {});
    });
    QUnit.testDone(function(details) {
      var callbacks, callbacksList, name, _i, _j, _len, _len1, _ref;
      window.TestModuleA = window.TestModuleB = window.TestModuleEmpty = void 0;
      hiddenDom.empty();
      manufactory._modules = {};
      manufactory._instances = {};
      _ref = manufactory.callbacks._global;
      for (callbacksList = _i = 0, _len = _ref.length; _i < _len; callbacksList = ++_i) {
        name = _ref[callbacksList];
        for (_j = 0, _len1 = callbacksList.length; _j < _len1; _j++) {
          callbacks = callbacksList[_j];
          callbacks.disable();
        }
      }
      return manufactory.callbacks._global = {};
    });
    test("global varibles", function() {
      return equal(TestModuleA, window.test.modules.A);
    });
    test("automatic initialisation", function() {
      equal(manufactory.find('test.modules.A').length, 2);
      equal(manufactory.find(TestModuleB.NAME).length, 0);
      return equal(manufactory.find(TestModuleEmpty.NAME).length, 0);
    });
    test("M.tree(), M.root(), M.element()", function() {
      equal(TestModuleA.ROOT_SELECTOR, '.js-module');
      equal(TestModuleEmpty.ROOT_SELECTOR, null);
      equal(TestModuleB.ROOT_SELECTOR, TestModuleA.ROOT_SELECTOR);
      deepEqual(TestModuleB.ELEMENTS, TestModuleA.ELEMENTS);
      return deepEqual(TestModuleA.ELEMENTS, {
        allButtons: {
          selector: 'button, [type=button]',
          global: false
        },
        inputTypeText: {
          selector: 'input[type=text]',
          global: false
        },
        someDiv: {
          selector: '.js-some-div-',
          global: false
        },
        someDivChild: {
          selector: '.js-some-div- .child',
          global: false
        },
        globalDiv: {
          selector: '.-global-div',
          global: true
        },
        all: {
          selector: '*',
          global: false
        }
      });
    });
    test("@root, @$element, @$$element", function() {
      var obj, root;
      root = $(moduleAHtmlOne);
      obj = new TestModuleA(root);
      deepEqual(root.get(), obj.root.get());
      deepEqual(root.find('button, [type=button]').get(), obj.$allButtons.get());
      return deepEqual($('.-global-div').get(), obj.$globalDiv.get());
    });
    test("methods", function() {
      return equal((new TestModuleA($([]))).getMessage(), 'hello');
    });
    return test("settings", function() {
      deepEqual((new TestModuleA($('<div>'))).settings, TestModuleA.DEFAULT_SETTINGS);
      deepEqual((new TestModuleA($('<div data-baz="baz">'))).settings, TestModuleA.DEFAULT_SETTINGS);
      deepEqual((new TestModuleA($('<div data-foo="foo">'))).settings, {
        foo: 'foo',
        bar: 'default bar'
      });
      deepEqual((new TestModuleA($('<div data-foo="foo" data-bar="bar" data-baz="baz">'))).settings, {
        foo: 'foo',
        bar: 'bar'
      });
      deepEqual((new TestModuleA($('<div>'), {
        foo: 'foo',
        baz: 'baz'
      })).settings, {
        foo: 'foo',
        bar: 'default bar',
        baz: 'baz'
      });
      return deepEqual((new TestModuleA($('<div data-foo="foo" data-bar="bar">'), {
        bar: 'bar1'
      })).settings, {
        foo: 'foo',
        bar: 'bar1'
      });
    });
    /* TODO:
      @find()
      @updateElements()
      manufactory.initAll()
      manufactory.init()
      DOM events (local/global)
        M.events()
        M.event()
        triggering itself
        handler arguments
      module events (local/global)
        @on(), @off(), @fire()
        manufactory.on(), manufactory.off()
        M.moduleEvents()
        triggering itself
        handler arguments
      $.fn.module()
      $.fn.update()
    */

  });

}).call(this);
