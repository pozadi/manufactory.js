// Generated by CoffeeScript 1.4.0
(function() {
  var ModuleInfo, action, buildModule, genName, jqueryPlugin, lastNameId, moduleInstances, modules, modulesAPI,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  modules = {};

  moduleInstances = {};

  window.BaseModule = (function() {

    BaseModule.NAME = 'BaseModule';

    BaseModule.EVENT_PREFIX = 'base-module';

    BaseModule.DEFAULT_SETTINGS = {};

    BaseModule.ROOT_SELECTOR = null;

    function BaseModule(root, settings) {
      var _this = this;
      this.root = root;
      this.root.data(this.constructor.NAME, this);
      this.settings = $.extend({}, this.constructor.DEFAULT_SETTINGS, settings);
      this.updateTree();
      this.root.on('html-inserted', function() {
        return _this.updateTree();
      });
      if (moduleInstances[this.constructor.NAME] === void 0) {
        moduleInstances[this.constructor.NAME] = [];
      }
      moduleInstances[this.constructor.NAME].push(this);
      if (typeof this.initializer === "function") {
        this.initializer();
      }
    }

    BaseModule.prototype.updateTree = function() {};

    BaseModule.prototype.find = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.root).find.apply(_ref, args);
    };

    BaseModule.prototype.on = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).on.apply(_ref, [this.constructor._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.off = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).off.apply(_ref, [this.constructor._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.fire = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).trigger.apply(_ref, [this.constructor._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.setOption = function(name, value) {
      return this.settings[name] = value;
    };

    BaseModule._fixEventName = function(name) {
      return "" + this.EVENT_PREFIX + "-" + name;
    };

    return BaseModule;

  })();

  ModuleInfo = (function() {

    ModuleInfo.INIT_MODES = ['load', 'lazy', 'none'];

    ModuleInfo.DEFAULT_INIT = 'none';

    ModuleInfo.prototype._methods = null;

    ModuleInfo.prototype._elements = null;

    ModuleInfo.prototype._events = null;

    ModuleInfo.prototype._globalEvents = null;

    ModuleInfo.prototype._modulesEvents = null;

    ModuleInfo.prototype._init = null;

    ModuleInfo.prototype._defaultSettings = null;

    ModuleInfo.prototype._eventPrefix = null;

    function ModuleInfo(name) {
      this.name = name;
      this._methods = {};
      this._elements = {};
      this._events = {};
      this._globalEvents = {};
      this._modulesEvents = {};
      this._init = this.constructor.DEFAULT_INIT;
      this._defaultSettings = {};
    }

    ModuleInfo.prototype.methods = function(newMethods) {
      return $.extend(this._methods, newMethods);
    };

    ModuleInfo.prototype.init = function(value) {
      if (__indexOf.call(this.constructor.INIT_MODES, value) < 0) {
        throw 'wrong value';
      }
      return this._init = value;
    };

    ModuleInfo.prototype.tree = function(treeString) {};

    ModuleInfo.prototype.events = function(eventsString) {};

    ModuleInfo.prototype.modulesEvents = function(modulesEventsString) {};

    ModuleInfo.prototype.globalEvents = function(globalEventsString) {};

    ModuleInfo.prototype.defaultSettings = function(newDefaultSettings) {
      return $.extend(this._defaultSettings, newDefaultSettings);
    };

    ModuleInfo.prototype.dependsOn = function() {
      var moduleNames;
      moduleNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    ModuleInfo.prototype["extends"] = function(moduleName) {};

    ModuleInfo.prototype.eventPrefix = function(prefix) {
      return this._eventPrefix = prefix;
    };

    return ModuleInfo;

  })();

  lastNameId = 0;

  genName = function() {
    return "Anonimous" + (lastNameId++);
  };

  buildModule = function(name, builder) {
    var info, newModule, value, _ref;
    if (builder === void 0) {
      builder = name;
      name = genName();
    }
    info = new ModuleInfo(name);
    builder(info);
    newModule = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      return _Class;

    })(BaseModule);
    newModule.NAME = name;
    newModule.DEFAULT_SETTINGS = info._defaultSettings;
    newModule.EVENT_PREFIX = info._eventPrefix || name;
    _ref = info._methods;
    for (name in _ref) {
      value = _ref[name];
      newModule.prototype[name] = value;
    }
    modules[name] = newModule;
    if (!/^Anonimous[0-9]+$/.test(name)) {
      window[name] = module;
    }
    return newModule;
  };

  modulesAPI = {
    find: function(moduleName) {
      return moduleInstances[moduleName] || [];
    },
    bind: function(moduleName, eventName, callback) {
      return $(document).on(modules[moduleName]._fixEventName(eventName), function(e) {
        var moduleInstance;
        moduleInstance = $(e.target).modules(moduleName)[0];
        if (moduleInstance) {
          callback(moduleInstance);
        }
        return true;
      });
    },
    initAll: function(context) {
      var $el, Module, el, name, settings, _i, _len, _results;
      _results = [];
      for (Module = _i = 0, _len = modules.length; _i < _len; Module = ++_i) {
        name = modules[Module];
        if (Module.ROOT_SELECTOR !== null) {
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = $(Module.ROOT_SELECTOR, context);
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              el = _ref[_j];
              $el = $(el);
              settings = $el.data();
              _results1.push(new Module($el, settings));
            }
            return _results1;
          })());
        }
      }
      return _results;
    }
  };

  jqueryPlugin = function(moduleName) {
    var el, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      el = this[_i];
      _results.push($(el).data(moduleName));
    }
    return _results;
  };

  $(function() {
    return modulesAPI.initAll(document);
  });

  $(document).on('html-inserted', function(e) {
    return modulesAPI.initAll(e.target);
  });

  window.module = buildModule;

  window.modules = modulesAPI;

  jQuery.prototype.modules = jqueryPlugin;

  jQuery.prototype.htmlInserted = function() {
    return this.trigger('html-inserted');
  };

  action = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $(function() {
      var a, callback;
      callback = args.pop();
      if (action.matcher((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          a = args[_i];
          _results.push(a.split('#'));
        }
        return _results;
      })())) {
        return callback();
      }
    });
  };

  action.matcher = function(actions) {
    var a, selector;
    selector = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        a = actions[_i];
        _results.push("body.controller-" + a[0] + ".action-" + a[1]);
      }
      return _results;
    })()).join(', ');
    return $(selector).length > 0;
  };

  window.action = action;

}).call(this);
