// Generated by CoffeeScript 1.4.0
(function() {
  var BaseModule, ModuleInfo, action, buildModule, jqueryPlugin, moduleInstances, modules, modulesAPI,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  modules = {};

  moduleInstances = {};

  BaseModule = (function() {

    BaseModule.prototype.NAME = 'BaseModule';

    BaseModule.prototype.DEFAULT_SETTINGS = {};

    function BaseModule(root, settings) {
      this.root = root;
      this.settings = $.extend({}, this.DEFAULT_SETTINGS, settings);
      this.updateTree();
      if (typeof this.initializer === "function") {
        this.initializer();
      }
    }

    BaseModule.prototype.updateTree = function() {};

    BaseModule.prototype.find = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.root).find.apply(_ref, args);
    };

    BaseModule.prototype.on = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).on.apply(_ref, [this._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.off = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).off.apply(_ref, [this._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.fire = function() {
      var args, eventName, _ref;
      eventName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return (_ref = this.root).trigger.apply(_ref, [this._fixEventName(eventName)].concat(__slice.call(args)));
    };

    BaseModule.prototype.setOption = function(name, value) {
      return this.settings[name] = value;
    };

    BaseModule.prototype._fixEventName = function(name) {
      return "" + this.NAME + "-" + name;
    };

    return BaseModule;

  })();

  ModuleInfo = (function() {

    ModuleInfo.prototype.INIT_MODES = ['load', 'lazy', 'none'];

    ModuleInfo.prototype.DEFAULT_OPTIONS = {
      init: 'none'
    };

    ModuleInfo.prototype._methods = null;

    ModuleInfo.prototype._elements = null;

    ModuleInfo.prototype._events = null;

    ModuleInfo.prototype._globalEvents = null;

    ModuleInfo.prototype._modulesEvents = null;

    ModuleInfo.prototype._options = null;

    ModuleInfo.prototype._defaultSettings = null;

    function ModuleInfo(name) {
      this.name = name;
      this._methods = {};
      this._elements = {};
      this._events = {};
      this._globalEvents = {};
      this._modulesEvents = {};
      this._options = $.extend({}, this.DEFAULT_OPTIONS);
      this._defaultSettings = {};
    }

    ModuleInfo.prototype.methods = function(newMethods) {
      return $.extend(this._methods, newMethods);
    };

    ModuleInfo.prototype.init = function(value) {
      if (__indexOf.call(this.INIT_MODES, value) < 0) {
        throw 'wrong value';
      }
      return this._options.init = value;
    };

    ModuleInfo.prototype.tree = function(treeString) {};

    ModuleInfo.prototype.events = function(eventsString) {};

    ModuleInfo.prototype.modulesEvents = function(modulesEventsString) {};

    ModuleInfo.prototype.globalEvents = function(globalEventsString) {};

    ModuleInfo.prototype.defaultSettings = function(newDefaultSettings) {
      return $.extend(this._defaultSettings, newDefaultSettings);
    };

    ModuleInfo.prototype.dependsOn = function() {
      var moduleNames;
      moduleNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };

    ModuleInfo.prototype["extends"] = function(moduleName) {};

    ModuleInfo.prototype.eventPrefix = function(prefix) {};

    return ModuleInfo;

  })();

  buildModule = function(name, builder) {
    var info, newModule, value, _ref, _results;
    if (builder === void 0) {
      builder = name;
      name = void 0;
    }
    info = new ModuleInfo(name);
    builder(info);
    newModule = (function(_super) {

      __extends(_Class, _super);

      function _Class() {
        return _Class.__super__.constructor.apply(this, arguments);
      }

      return _Class;

    })(BaseModule);
    newModule.prototype.NAME = name;
    newModule.prototype.DEFAULT_SETTINGS = info._defaultSettings;
    _ref = info._methods;
    _results = [];
    for (name in _ref) {
      value = _ref[name];
      _results.push(newModule.prototype[name] = value);
    }
    return _results;
  };

  modulesAPI = {
    find: function(moduleName) {},
    bind: function(moduleName, eventName, callback) {},
    initAll: function(root) {}
  };

  jqueryPlugin = function(moduleName) {};

  window.module = buildModule;

  window.modules = modulesAPI;

  jQuery.prototype.modules = jqueryPlugin;

  jQuery.prototype.htmlInserted = function() {
    return this.trigger('html-inserted');
  };

  action = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return $(function() {
      var a, callback;
      callback = args.pop();
      if (action.matcher((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          a = args[_i];
          _results.push(a.split('#'));
        }
        return _results;
      })())) {
        return callback();
      }
    });
  };

  action.matcher = function(actions) {
    var a, selector;
    selector = ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = actions.length; _i < _len; _i++) {
        a = actions[_i];
        _results.push("body.controller-" + a[0] + ".action-" + a[1]);
      }
      return _results;
    })()).join(', ');
    return $(selector).length > 0;
  };

  window.action = action;

}).call(this);
